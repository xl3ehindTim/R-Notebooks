data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggplot2)
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
data
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
uniqueBicycles <- data %>% distinct(gear_id)
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
uniqueBicycles <- data %>% distinct(gear_id)
uniqueBicycles
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
uniqueBicycles <- data %>% distinct(gear_id) %>% summarise(amount=n())
uniqueBicycles
uniqueBicycles <- data %>% distinct(gear_id) %>% summarise(amount=n())
uniqueBicycles
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
data
uniqueBicycles <- data %>% filter(type == "Ride" || type == "VirtualRide") distinct(gear_id) %>% summarise(amount=n())
uniqueBicycles <- data %>% filter(type == "Ride", type == "VirtualRide") distinct(gear_id) %>% summarise(amount=n())
uniqueBicycles <- data %>% filter(type == "Ride" || type == "VirtualRide") %>% distinct(gear_id) %>% summarise(amount=n())
uniqueBicycles
uniqueBicycles <- data %>%
filter(type == "Ride" || type == "VirtualRide") %>% distinct(gear_id) %>% summarise(amount=n())
uniqueBicycles
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
data
speed <- data %>% group_by(gear_id)
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
data
speed <- data %>% group_by(gear_id)
speed
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
data
speed <- data %>% group_by(gear_id) %>% summarise(speed=distance / moving_time)
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
data
speed <- data %>% group_by(gear_id) %>% summarise(speed=distance / moving_time)
speed
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
data
speed <- data %>% group_by(gear_id) %>% summarise(speed=sum(moving_time))
speed
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
data
speed <- data %>% group_by(gear_id) %>% summarise(speed=sum(distance) / sum(moving_time))
speed
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
data
speed <- data %>% group_by(gear_id) %>% summarise(average_speed=sum(distance) / sum(moving_time))
speed
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
data
speed <- data %>% group_by(gear_id) %>% summarise(average_speed=sum(distance) / sum(moving_time)) %>% arrange(average_speed)
speed
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
data
speed <- data %>% group_by(gear_id) %>% summarise(average_speed=sum(distance) / sum(moving_time)) %>% arrange(desc(average_speed))
speed
uniqueBicycles <- data %>%
filter(type == "Ride" || type == "VirtualRide") %>% # Filter on type is Ride or VirtualRide. This is not necessary at the moment since other activities don't have a gear_id
distinct(gear_id) %>% # Get all unique gear_id's
summarise(amount=n()) # Get amount of rows left by unique gear id
# Show amount of unique bicycles
uniqueBicycles
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
speed <- data %>% group_by(gear_id) %>% summarise(average_speed=sum(distance) / sum(moving_time)) %>% arrange(desc(average_speed))
speed
speed <- data %>% distinct(gear_id) %>% group_by(gear_id) %>% summarise(average_speed=sum(distance) / sum(moving_time)) %>% arrange(desc(average_speed))
speed <- data %>% group_by(gear_id) %>% summarise(average_speed=sum(distance) / sum(moving_time)) %>% arrange(desc(average_speed))
speed
uniqueBicycles <- data %>%
filter(type == "Ride"m type == "VirtualRide") %>% # Filter on type is Ride or VirtualRide. This is not necessary at the moment since other activities don't have a gear_id
uniqueBicycles <- data %>%
filter(type == "Ride" || type == "VirtualRide") %>% # Filter on type is Ride or VirtualRide. This is not necessary at the moment since other activities don't have a gear_id
distinct(gear_id) %>% # Get all unique gear_id's
summarise(amount=n()) # Get amount of rows left by unique gear id
# Show amount of unique bicycles
uniqueBicycles
speed <- data %>% group_by(gear_id) %>% summarise(average_speed=sum(distance) / sum(moving_time)) %>% arrange(desc(average_speed))
speed
library(dplyr)
library(tidyverse)
library(ggplot2)
library(lubridate)
time <- data %>%
mutate(
date = as.Date(start_date),
hour = hour(start_date),
) %>%
group_by(Month = format(date, "%m")) %>%
summarise(average_starting_hour = mean(hour)) %>%
mutate(MonthName=month.abb[as.factor(Month)]) %>%
arrange(Month)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(lubridate)
data <- read.csv("./data/strava.csv", sep = ";") # Convert CSV data to dataframe in R. Use ; as the seperator
View(data)
time <- data %>%
mutate(
date = as.Date(start_date),
hour = hour(start_date),
) %>%
group_by(Month = format(date, "%m")) %>%
summarise(average_starting_hour = mean(hour)) %>%
mutate(MonthName=month.abb[as.factor(Month)]) %>%
arrange(Month)
time
ggplot(time, aes(x = reorder(MonthName, as.numeric(Month)), y=average_starting_hour, group=1)) +
geom_line() +
labs(x="Maand", y="Gemiddelde starttijd (uur)", title="Starttijd op maand")
uniqueBicycles <- data %>%
filter(type == "Ride" || type == "VirtualRide") %>% # Filter on type is Ride or VirtualRide. This is not necessary at the moment since other activities don't have a gear_id
distinct(gear_id) %>% # Get all unique gear_id's
summarise(amount=n()) # Get amount of rows left by unique gear id
# Show amount of unique bicycles
uniqueBicycles
speed <- data %>%
filter(!is.na(gear_id)) %>% # Remove rows with NA gear_id (non bicycle)
group_by(gear_id) %>%   # Group on gear_id
summarise(average_speed=sum(distance) / sum(moving_time)) %>% # Calculate average speed by using sum distance / sum moving time
arrange(desc(average_speed)) # Arrange from high to low
ggplot(speed, aes(x=gear_id, y=average_speed)) +
geom_col() +
labs(x="Fiets ID", y="Gemiddelde snelheid (km/u)", title="Snelheid per fiets") +
geom_text(aes(label = round(average_speed, digits=2)), vjust = -0.2)
time <- data %>%
mutate(
date = as.Date(start_date),
hour = hour(start_date),
) %>%
group_by(Month = format(date, "%m")) %>%
summarise(average_moving_time = mean(moving_time)) %>%
mutate(MonthName=month.abb[as.factor(Month)]) %>%
arrange(Month)
time
ggplot(time, aes(x = reorder(MonthName, as.numeric(Month)), y=average_moving_time, group=1)) +
geom_line()
library(dplyr)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(readxl)
data <- read_excel("./data/strava.csv") # Convert CSV data to dataframe in R. Use ; as the seperator
data <- read_excel("./data/strava.xlsx") # Convert CSV data to dataframe in R. Use ; as the seperator
library(dplyr)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(readxl)
data
data %>% group_by(type) %>% summarise(t=sum(distance))
data
data %>% group_by(day)
data
data %>% group_by(start_day)
data %>% group_by(start_day) %>% summarise(t=sum(as.num(distance)))
data %>% group_by(start_day) %>% summarise(t=sum(as.numeric(distance)))
data
data %>% group_by(start_day) %>% summarise(t=sum(as.numeric(distance)))
data %>% group_by(start_day) %>% summarise(t=sum(as.numeric(distance_raw)))
data %>% group_by(start_day) %>% summarise(t=sum(as.numeric(distance_raw)) / 1000)
data %>% group_by(start_day) %>% summarise(kilometers=sum(as.numeric(distance_raw)) / 1000)
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=kilometers)) +
geom_col()
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(kilometers=sum(as.numeric(distance_raw)) / 1000)
kilometers_by_day
ggplot(kilometers_by_day, aes(x=start_day, y=kilometers)) +
geom_col()
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=kilometers)) +
geom_col()
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=kilometers)) +
geom_col()
View(kilometers_by_day)
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=kilometers)) +
geom_col() +
labs(x="Dag", y="Kilometers")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=kilometers)) +
geom_col() +
labs(x="Dag", y="Afgelegde kilometers")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=kilometers)) +
geom_col() +
labs(x="Dag", y="Kilometers", title="Afgelegde kilometers per dag")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=kilometers, fill=kilometers)) +
geom_col() +
labs(x="Dag", y="Kilometers", title="Afgelegde kilometers per dag")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=kilometers, fill=start_day)) +
geom_col() +
labs(x="Dag", y="Kilometers", title="Afgelegde kilometers per dag")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=kilometers)) +
geom_col() +
labs(x="Dag", y="Kilometers", title="Afgelegde kilometers per dag")
count_by_time <-
data %>%
group_by(hour) %>%
summarize(count = n(), miles = sum(dist_miles)) %>%
ggplot(aes(x = hour, y = count)) +
geom_col(aes(fill = miles)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x= "Time of Day", y= "Number of Runs", fill = "Total Miles") +
ggtitle("What time of day do I usually run?")
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data %>% mutate(hour = hour(start_date_local)) %>%
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data %>% mutate(hour = hour(start_date_local))
View(data)
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data %>% mutate(hour = hour(start_date))
View(kilometers_by_day)
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
count_by_time <-
data %>%
group_by(hour) %>%
summarize(count = n(), miles = sum(dist_miles)) %>%
ggplot(aes(x = hour, y = count)) +
geom_col(aes(fill = miles)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x= "Time of Day", y= "Number of Runs", fill = "Total Miles") +
ggtitle("What time of day do I usually run?")
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data %>%
mutate(
date = as.Date(start_date),
hour = hour(start_date),
) %>%
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data %>%
mutate(
date = as.Date(start_date),
hour = hour(start_date),
)
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data %>%
mutate(
hour = hour(start_date),
)
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data <- data %>%
select(c('start_date_local', 'distance', 'moving_time', 'total_elevation_gain', 'average_speed', 'max_speed', 'kudos_count'))
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data <- data %>%
as_tibble() %>%
mutate_at("start_date_local", ymd_hms) %>%
mutate(date = floor_date(start_date_local, "day")) %>%
mutate(weekday = wday(date, label = TRUE)) %>%
mutate(hour = hour(start_date_local)) %>%
mutate(minutes_moving = moving_time/60) %>%
mutate(dist_miles = distance/1609)
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data <- data %>%
as_tibble() %>%
#mutate_at("start_date_local", ymd_hms) %>%
mutate(date = floor_date(start_date_local, "day")) %>%
mutate(weekday = wday(date, label = TRUE)) %>%
mutate(hour = hour(start_date_local)) %>%
mutate(minutes_moving = moving_time/60) %>%
mutate(dist_miles = distance/1609)
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data <- data %>%
as_tibble() %>%
#mutate_at("start_date_local", ymd_hms) %>%
#mutate(date = floor_date(start_date_local, "day")) %>%
mutate(weekday = wday(date, label = TRUE)) %>%
#mutate(hour = hour(start_date_local)) %>%
mutate(minutes_moving = moving_time/60) %>%
mutate(dist_miles = distance/1609)
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data <- data %>%
as_tibble() %>%
mutate_at("start_date_local", ymd_hms) %>%
mutate(date = floor_date(start_date_local, "day")) %>%
mutate(weekday = wday(date, label = TRUE)) %>%
mutate(hour = hour(start_date_local)) %>%
mutate(minutes_moving = moving_time/60) %>%
mutate(dist_miles = distance/1609)
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data %>% mutate(start_date_local=as_date(as_datetime(start_date_local_raw)))
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data <- %>% mutate(start_date_local=as_date(as_datetime(start_date_local_raw)))
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data <- data %>% mutate(start_date_local=as_date(as_datetime(start_date_local_raw)))
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=kilometers)) +
geom_col() +
labs(x="Dag", y="Kilometers", title="Afgelegde kilometers per dag")
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data <- data %>% mutate(start_date_local=as_date(as_datetime(start_date_local_raw)))
data$hour(start_date)
count_by_time <-
data %>%
group_by(hour) %>%
summarize(count = n(), miles = sum(dist_miles)) %>%
ggplot(aes(x = hour, y = count)) +
geom_col(aes(fill = miles)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x= "Time of Day", y= "Number of Runs", fill = "Total Miles") +
ggtitle("What time of day do I usually run?")
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data <- data %>% mutate(start_date_local=as_date(as_datetime(start_date_local_raw))) %>%   mutate(hour = hour(start_date_local))
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data <- data %>% mutate(start_date_local=as_date(as_datetime(start_date_local_raw))) %>% mutate(hour = hour(start_date_local))
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data <- data %>% mutate(start_date_local=as_date(as_datetime(start_date_local_raw))) %>% mutate(day = day(start_date_local))
View(kilometers_by_day)
View(data)
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data <- data %>% mutate(start_date_local=as_datetime(start_date_local_raw)) %>% mutate(day = day(start_date_local))
View(data)
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data <- data %>% mutate(start_date_local=as_datetime(start_date_local_raw)) %>% mutate(hour = hour(start_date_local))
count_by_time <-
data %>%
group_by(hour) %>%
summarize(count = n(), miles = sum(dist_miles)) %>%
ggplot(aes(x = hour, y = count)) +
geom_col(aes(fill = miles)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x= "Time of Day", y= "Number of Runs", fill = "Total Miles") +
ggtitle("What time of day do I usually run?")
count_by_time <-
data %>%
group_by(hour) %>%
summarize(count = n(), kilometers = sum(distance)) %>%
ggplot(aes(x = hour, y = count)) +
geom_col(aes(fill = kilometers)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x= "Time of Day", y= "Number of Runs", fill = "Total Miles") +
ggtitle("What time of day do I usually run?")
count_by_time <-
data %>%
group_by(hour) %>%
summarize(count = n(), kilometers = sum(distance_raw)) %>%
ggplot(aes(x = hour, y = count)) +
geom_col(aes(fill = kilometers)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x= "Time of Day", y= "Number of Runs", fill = "Total Miles") +
ggtitle("What time of day do I usually run?")
count_by_time
count_by_time <-
data %>%
group_by(hour) %>%
summarize(count = n(), kilometers = sum(distance_raw) / 1000) %>%
ggplot(aes(x = hour, y = count)) +
geom_col(aes(fill = kilometers)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x= "Time of Day", y= "Number of Runs", fill = "Total Miles") +
ggtitle("What time of day do I usually run?")
count_by_time
count_by_time <-
data %>%
group_by(hour) %>%
summarize(count = n(), kilometers = sum(distance_raw) / 1000) %>%
ggplot(aes(x = hour, y = count)) +
geom_col(aes(fill = kilometers)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x= "Time of Day", y= "Number of Runs", fill = "Total Kilometers") +
ggtitle("What time of day do I usually run?")
count_by_time
grouped_data <- data %>%
group_by(hour) %>%
summarise(count = n(), kilometers = sum(distance_raw) / 1000)
ggplot(grouped_data, aes(x = hour, y = count)) +
geom_col(aes(fill = kilometers)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x= "Time of Day", y= "Number of Runs", fill = "Total Kilometers") +
ggtitle("What time of day do I usually run?")
grouped_data <- data %>%
group_by(hour) %>%
summarise(count = n(), kilometers = sum(distance_raw) / 1000)
ggplot(grouped_data, aes(x = hour, y = count)) +
geom_col(aes(fill = kilometers)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x= "Tijd van de dag", y= "Aantal runs", fill = "Totale kilometers") +
ggtitle("What time of day do I usually run?")
grouped_data <- data %>%
group_by(hour) %>%
summarise(count = n(), kilometers = sum(distance_raw) / 1000)
ggplot(grouped_data, aes(x = hour, y = count)) +
geom_col(aes(fill = kilometers)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x= "Tijd van de dag", y= "Aantal runs", fill = "Totale kilometers") +
ggtitle("Welke tijd van de dag ren ik meestal?")
data <- data %>% mutate(start_date_local=as_datetime(start_date_local_raw)) %>% mutate(hour = hour(start_date_local))
grouped_data <- data %>%
group_by(hour) %>%
summarise(count = n(), kilometers = sum(distance_raw) / 1000)
ggplot(grouped_data, aes(x = hour, y = count)) +
geom_col(aes(fill = kilometers)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x= "Tijd van de dag", y= "Aantal runs", fill = "Totale kilometers") +
ggtitle("Welke tijd van de dag ren ik meestal?")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=kilometers)) +
geom_col() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x="Dag", y="Kilometers", title="Afgelegde kilometers per dag")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=kilometers, fill=kilometers)) +
geom_col() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x="Dag", y="Kilometers", title="Afgelegde kilometers per dag")
data <- data %>% mutate(start_date_local=as_datetime(start_date_local_raw)) %>% mutate(hour = hour(start_date_local))
grouped_data <- data %>%
group_by(hour) %>%
summarise(count = n(), kilometers = sum(distance_raw) / 1000)
ggplot(grouped_data, aes(x = hour, y = count)) +
geom_col(aes(fill = kilometers)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(title="Welke tijd van de dag ren ik meestal?", x= "Tijd van de dag", y= "Aantal runs", fill = "Totale kilometers") +
ggtitle("Welke tijd van de dag ren ik meestal?")
data <- data %>% mutate(start_date_local=as_datetime(start_date_local_raw)) %>% mutate(hour = hour(start_date_local))
grouped_data <- data %>%
group_by(hour) %>%
summarise(count = n(), kilometers = sum(distance_raw) / 1000)
ggplot(grouped_data, aes(x = hour, y = count)) +
geom_col(aes(fill = kilometers)) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(title="Welke tijd van de dag ren ik meestal?", x= "Tijd van de dag", y= "Aantal runs", fill = "Totale kilometers")
data <- data %>% mutate(start_date_local=as_datetime(start_date_local_raw)) %>% mutate(hour = hour(start_date_local))
grouped_data <- data %>%
group_by(hour) %>%
summarise(count = n(), kilometers = sum(distance_raw) / 1000)
ggplot(grouped_data, aes(x=hour, y=count)) +
geom_col(aes(fill=kilometers)) +
scale_fill_gradient(low ="yellow", high="red") +
labs(title="Welke tijd van de dag ren ik meestal?", x="Tijd van de dag", y="Aantal runs", fill="Totale kilometers")
data <- data %>% mutate(start_date_local=as_datetime(start_date_local_raw)) %>% mutate(hour = hour(start_date_local)) # Muteer start_date_local_raw naar datetime, zodat ik de hour functie kan toepassen om hierop een summary te maken.
grouped_data <- data %>%
group_by(hour) %>% # Groepeer op uur
summarise(count = n(), kilometers = sum(distance_raw) / 1000) # Maak ik summary van het aantal rijen n() en aantal kilometers = sum(distance_raw) / 1000
ggplot(grouped_data, aes(x=hour, y=count, fill=kilometers)) +
geom_col() +
scale_fill_gradient(low ="yellow", high="red") +
labs(title="Welke tijd van de dag ren ik meestal?", x="Tijd van de dag", y="Aantal runs", fill="Totale kilometers")
data <- data %>% mutate(start_date_local=as_datetime(start_date_local_raw)) %>% mutate(hour = hour(start_date_local)) # Muteer start_date_local_raw naar datetime, zodat ik de hour functie kan toepassen om hierop een summary te maken.
grouped_data <- data %>%
group_by(hour) %>% # Groepeer op uur
summarise(count = n(), kilometers = sum(distance_raw) / 1000) # Maak een summary van het aantal rijen n() en aantal kilometers = sum(distance_raw) / 1000
ggplot(grouped_data, aes(x=hour, y=count, fill=kilometers)) +
geom_col() +
scale_fill_gradient(low ="yellow", high="red") +
labs(title="Welke tijd van de dag ren ik meestal?", x="Tijd van de dag", y="Aantal runs", fill="Totale kilometers")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(count = n(), kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=kilometers, fill=kilometers)) +
geom_col() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x="Dag", y="Kilometers", title="Afgelegde kilometers per dag")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(count = n(), kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=count, fill=kilometers)) +
geom_col() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x="Dag", y="Kilometers", title="Afgelegde kilometers per dag")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(count = n(), kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=count, fill=kilometers)) +
geom_col() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x="Dag", y="Aantal runs", title="Afgelegde kilometers per dag")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=kilometers, fill=kilometers)) +
geom_col() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x="Dag", y="Kilometers", title="Afgelegde kilometers per dag")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(count=n(), kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=count, fill=kilometers)) +
geom_col() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x="Dag", y="Kilometers", title="Afgelegde kilometers per dag")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(count=n(), kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=count, fill=kilometers)) +
geom_col() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x="Dag", y="Aantal runs", title="Afgelegde kilometers per dag")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(count=n(), kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=count, fill=kilometers)) +
geom_col() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x="Dag", y="Aantal runs", title="Afgelegde kilometers per dag")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(count=n(), kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=count, fill=kilometers)) +
geom_col() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x="Dag", y="Aantal runs", title="Afgelegde kilometers per dag", fill="Totale kilometers")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(count=n(), kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=count, fill=kilometers)) +
geom_col() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x="Dag", y="Aantal runs", title="Op welke dag ren ik meestal?", fill="Totale kilometers")
kilometers_by_day <- data %>% group_by(start_day) %>% summarise(count=n(), kilometers=sum(as.numeric(distance_raw)) / 1000)
ggplot(kilometers_by_day, aes(x=start_day, y=count, fill=kilometers)) +
geom_col() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(x="Dag", y="Aantal runs", title="Op welke dag ren ik meestal?", fill="Totale kilometers") +
coord_flip()
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
data
data <- read_excel("./data/strava.xlsx") # Convert Excel sheet to dataframe
